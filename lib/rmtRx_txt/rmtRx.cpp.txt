#include "meAlarm.h"
#include "sensors.h"
#include <stdint.h>
#include "time.h"
#include "mTypes.h"


#include "rmtRx.h"
#include <stdio.h>
#include <inttypes.h>
#include <string.h>
#include "sdkconfig.h"
#include "freertos/FreeRTOS.h"
#include "freertos/task.h"
 #include "freertos/queue.h"

  //#include <inttypes.h>

#include "esp_log.h"
#include "driver/rmt.h"
#include "ir_tools.h"
#include "def_tasks.h"

#define ERR_CHECK(err, str) if (err != ESP_OK) ESP_LOGE(TAG, "%s: #%d %s", str, err, esp_err_to_name(err));
#define ERR_GPIO_SET_MODE "Failed to set GPIO mode"
#define ERR_GPIO_SET_ISR  "Failed to set ISR handler"

#define CONFIG_RMT_RX_CHANNEL (rmt_channel_t)4
#define CONFIG_RMT_RX_GPIO    (gpio_num_t)CONFIG_GPIO_RX_IR   // 35

gpio_num_t _gpioRx = GPIO_NUM_MAX;

// Очередь для приёма данных
static QueueHandle_t rxQueue = NULL;

typedef struct {
  uint32_t value;
  uint16_t address;
  uint16_t command;
  bool repeat;
} rx_data_t;

rx_data_t data;

static const char *TAG = "rxMORO";
static const char* rx_TaskName = "irPult";
static TaskHandle_t _rx_task;

static void rmtRxTask(void *arg)
{
  ESP_LOGD(pcTaskGetName(0), "Start");
  uint32_t addr = 0;
  uint32_t cmd = 0;
  size_t length = 0;
  bool repeat = false;
  RingbufHandle_t rb = NULL;
  rmt_item32_t *items = NULL;

  rmt_channel_t rx_channel = CONFIG_RMT_RX_CHANNEL;

  rmt_config_t rmt_rx_config = RMT_DEFAULT_CONFIG_RX(CONFIG_RMT_RX_GPIO, rx_channel);
  //rmt_config_t rmt_rx_config = RMT_DEFAULT_CONFIG_RX(_gpioRx, rx_channel);
  
  rmt_config(&rmt_rx_config);
  rmt_driver_install(rx_channel, 1000, 0);
  ir_parser_config_t ir_parser_config = IR_PARSER_DEFAULT_CONFIG((ir_dev_t)rx_channel);
  ir_parser_config.flags |= IR_TOOLS_FLAGS_PROTO_EXT; // Using extended IR protocols (both NEC and RC5 have extended version)
  ir_parser_t *ir_parser = NULL;
  ir_parser = ir_parser_rmt_new_nec(&ir_parser_config);

  //get RMT RX ringbuffer
  rmt_get_ringbuf_handle(rx_channel, &rb);
  assert(rb != NULL);
  // Start receive
  rmt_rx_start(rx_channel, true);
  while (1)
  {
     items = (rmt_item32_t *) xRingbufferReceive(rb, &length, portMAX_DELAY);

  ESP_LOGI(TAG, "On gpio #%d", _gpioRx);


      if (items) 
    {
      length /= 4; // one RMT = 4 Bytes
      if (ir_parser->input(ir_parser, items, length) == ESP_OK) 
      {
        if (ir_parser->get_scan_code(ir_parser, &addr, &cmd, &repeat) == ESP_OK) 
        {
          ESP_LOGI(TAG, "Scan Code %s --- addr: 0x%04" PRIx32" cmd: 0x%04" PRIx32, repeat ? "(repeat)" : "", addr, cmd);
// =================
            QueueHandle_t queueProc = (QueueHandle_t)arg;
            if (queueProc) 
            {
              //data.value = 0xFF00F609;  // VOL+
//              data.value = ((uint32_t)_addr << 16) | _cmd;
//  rlog_i(TAG, "Scan Code %s --- value: 0x%04" PRIx32);

              rx_ResetAvailable();      // reset recieved value
                      // we have not woken a task at the start of the ISR
              BaseType_t xHigherPriorityTaskWoken = pdFALSE;

              // публиковать данные
              xQueueSendFromISR(queueProc, &data, &xHigherPriorityTaskWoken);

              // now the buffer is empty we can switch context if necessary.
              if (xHigherPriorityTaskWoken) 
              {
                  portYIELD_FROM_ISR();
              };
            } else {
              // reset recieved value
              rx_ResetAvailable();
            };
            //break;

// =================
        }
      }
      //after parsing the data, return spaces to ringbuffer.
      vRingbufferReturnItem(rb, (void *) items);
    }
  }
  ir_parser->del(ir_parser);
  rmt_driver_uninstall(rx_channel);
  vTaskDelete(NULL);
}


void rxTaskStart(const uint8_t gpioRx, QueueHandle_t queueProc)
{
//   //rxQueue = xQueueCreate(32, sizeof(my_rx_data));

//    #include "common_config.h"

// #if CONFIG_RX_STATIC_ALLOCATION

//   rxQueue = xQueueCreate(32, sizeof(data));

//   static StaticTask_t rx_TaskBuffer;
//   static StackType_t rx_TaskStack[CONFIG_RX_TASK_STACK_SIZE];

//     _rx_Task = xTaskCreateStaticPinnedToCore(rx_task, rx_TaskName, 
//       CONFIG_RX_TASK_STACK_SIZE, NULL, CONFIG_TASK_PRIORITY_SENSORS, rx_TaskStack, 
//        &rx_TaskBuffer, CONFIG_TASK_CORE_SENSORS);
//  #else

//   //rxQueue = xQueueCreate(32, sizeof(rx_data));


  xTaskCreate(rmtRxTask, "irPult", 2048, NULL, 9, NULL);

  _gpioRx = static_cast<gpio_num_t>(gpioRx);

//  xTaskCreate(rx_task, rx_TaskName, CONFIG_RX_TASK_STACK_SIZE, NULL,
//    CONFIG_TASK_PRIORITY_IR_RX, NULL);

  // xTaskCreatePinnedToCore(rx_task, rx_TaskName, 
  //   CONFIG_RX_TASK_STACK_SIZE, NULL, CONFIG_TASK_PRIORITY_IR_RX,
  //     &_rx_task, CONFIG_TASK_CORE_IR_RX);
// #endif // CONFIG_RX_STATIC_ALLOCATION


}

// void rxInit(const uint8_t gpioRx, QueueHandle_t queueProc)
// {
//   _gpioRx = static_cast<gpio_num_t>(gpioRx);
  
//   ESP_LOGI(TAG, "Initialization of receiver on gpio #%d", _gpioRx);

//   ERR_CHECK(gpio_install_isr_service(0), "Failed to install ISR service");
    
//   gpio_reset_pin(_gpioRx);
//   ERR_CHECK(gpio_set_direction(_gpioRx, GPIO_MODE_INPUT), ERR_GPIO_SET_MODE);
//   ERR_CHECK(gpio_set_pull_mode(_gpioRx, GPIO_FLOATING), ERR_GPIO_SET_MODE);
//   ERR_CHECK(gpio_set_intr_type(_gpioRx, GPIO_INTR_ANYEDGE), ERR_GPIO_SET_ISR);
//   //ERR_CHECK(gpio_isr_handler_add(_gpioRx, rxIsrHandler, queueProc), ERR_GPIO_SET_ISR);
//   ERR_CHECK(gpio_isr_handler_add(_gpioRx, rx_task, queueProc), ERR_GPIO_SET_ISR);
// }

// void rxEnable()
// {
//   // esp_err_t err = gpio_intr_enable(_gpioRx);
//   // if (err == ESP_OK) {
//   //   rlog_i(logTAG, "Receiver 433MHz started");
//   // } else {
//   //   rlog_e(logTAG, "Failed to start 433MHz receiver");
//   // };
// }


void rx_ResetAvailable()
{
  data.address = 0;
  data.value = 0;
}
