#include "security.h"
#include <stdbool.h>
#include "project_config.h"
#include "common_config.h"
#include "def_alarm.h"
#include "def_consts.h"
#include "rTypes.h"
#include "reGpio.h"
#include "reLed.h"
#include "reEvents.h"
#include "reParams.h"
#include "rLog.h"
  //  #include "reBeep.h"   /* !!! reAlarm.cpp:20:10  */


static const char* logTAG = "ALARM";

// ------------------------------------------------------------------------
//                          –ü—Ä–æ–≤–æ–¥–Ω—ã–µ –≤—Ö–æ–¥—ã 
// ------------------------------------------------------------------------

// –û–±—ä–µ–∫—Ç—ã reGPIO –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏–π –ø–æ –ø—Ä–æ–≤–æ–¥–Ω—ã–º –≤—Ö–æ–¥—ã–º –û–ü–°
static reGPIO gpioAlarm1(CONFIG_GPIO_ALARM_ZONE_1, CONFIG_GPIO_ALARM_LEVEL, false, true, CONFIG_BUTTON_DEBOUNCE_TIME_US, nullptr);
// static reGPIO gpioAlarm2(CONFIG_GPIO_ALARM_ZONE_2, CONFIG_GPIO_ALARM_LEVEL, false, true, CONFIG_BUTTON_DEBOUNCE_TIME_US, nullptr);
// static reGPIO gpioAlarm3(CONFIG_GPIO_ALARM_ZONE_3, CONFIG_GPIO_ALARM_LEVEL, false, true, CONFIG_BUTTON_DEBOUNCE_TIME_US, nullptr);
// static reGPIO gpioAlarm4(CONFIG_GPIO_ALARM_ZONE_4, CONFIG_GPIO_ALARM_LEVEL, false, true, CONFIG_BUTTON_DEBOUNCE_TIME_US, nullptr);
// static reGPIO gpioAlarm5(CONFIG_GPIO_ALARM_ZONE_5, CONFIG_GPIO_ALARM_LEVEL, false, true, CONFIG_BUTTON_DEBOUNCE_TIME_US, nullptr);

// ------------------------------------------------------------------------
//                             –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è 
// ------------------------------------------------------------------------

void alarmInitDevices()
{
  rlog_i(logTAG, "Initialization of AFS devices");

  // –°–æ–∑–¥–∞–µ–º —Å–≤–µ—Ç–æ–¥–∏–æ–¥—ã, —Å–∏—Ä–µ–Ω—É –∏ —Ñ–ª–µ—à–µ—Ä
  ledQueue_t ledAlarm = nullptr;
  #if defined(CONFIG_GPIO_ALARM_LED) && (CONFIG_GPIO_ALARM_LED > -1)
    ledAlarm = ledTaskCreate(CONFIG_GPIO_ALARM_LED, true, true, "led_alarm", CONFIG_LED_TASK_STACK_SIZE, nullptr);
    ledTaskSend(ledAlarm, lmOff, 0, 0, 0);
  #endif // CONFIG_GPIO_ALARM_LED

  ledQueue_t siren = nullptr;
  #if defined(CONFIG_GPIO_ALARM_SIREN) && (CONFIG_GPIO_ALARM_SIREN > -1)
    siren = ledTaskCreate(CONFIG_GPIO_ALARM_SIREN, true, false, "siren", CONFIG_LED_TASK_STACK_SIZE, nullptr);
    ledTaskSend(siren, lmOff, 0, 0, 0);
  #endif // CONFIG_GPIO_ALARM_SIREN

  ledQueue_t flasher = nullptr;
  #if defined(CONFIG_GPIO_ALARM_FLASH) && (CONFIG_GPIO_ALARM_FLASH > -1)
    flasher = ledTaskCreate(CONFIG_GPIO_ALARM_FLASH, true, true, "flasher", CONFIG_LED_TASK_STACK_SIZE, nullptr);
    ledTaskSend(flasher, lmBlinkOn, 1, 100, 5000);
  #endif // CONFIG_GPIO_ALARM_FLASH
  
  // –ó–∞–º–µ–Ω–∞ –ø–∞—Å—Å–∏–≤–Ω–æ–π –ø–∏—â–∞–ª–∫–∏ –Ω–∞ –∞–∫—Ç–∏–≤–Ω—É—é
  ledQueue_t buzzer = nullptr;
  #if defined(CONFIG_GPIO_BUZZER_ACTIVE) && (CONFIG_GPIO_BUZZER_ACTIVE > -1)
    buzzer = ledTaskCreate(CONFIG_GPIO_BUZZER_ACTIVE, true, false, "buzzer", CONFIG_LED_TASK_STACK_SIZE, nullptr);
    ledTaskSend(buzzer, lmOff, 0, 0, 0);
  #endif // CONFIG_GPIO_ALARM_FLASH
  
  // –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É
  alarmTaskCreate(siren, flasher, buzzer, ledAlarm, ledAlarm, nullptr);

  // –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–∏–µ–º–Ω–∏–∫ RX 433 MHz
  #if defined (CONFIG_GPIO_RX433) && (CONFIG_GPIO_RX433 > -1)
    rx433_Init(CONFIG_GPIO_RX433, alarmTaskQueue());
    rx433_Enable();
  #endif // CONFIG_GPIO_RX433
}

void alarmInitSensors()
{
  rlog_i(logTAG, "Initialization of AFS zones");
  // ------------------------------------------------------------------------
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–æ–Ω—ã –æ—Ö—Ä–∞–Ω—ã
  // ------------------------------------------------------------------------

  // –î–≤–µ—Ä–∏ (–ø–µ—Ä–∏–º–µ—Ç—Ä) :: —Å–æ–∑–¥–∞–µ–º –∑–æ–Ω—É –æ—Ö—Ä–∞–Ω—ã
  alarmZoneHandle_t azDoors = alarmZoneAdd(
    "–î–≤–µ—Ä–∏",           // –ü–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–æ–Ω—ã
    "doors",           // MQTT-—Ç–æ–ø–∏–∫ –∑–æ–Ω—ã
    nullptr            // –§—É–Ω–∫—Ü–∏—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Ä–µ–ª–µ, –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
  );
  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è –¥–∞–Ω–Ω–æ–π –∑–æ–Ω—ã –≤ —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–∞—Ö
  alarmResponsesSet(
    azDoors,           // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–æ–Ω—É –æ—Ö—Ä–∞–Ω—ã
    ASM_DISABLED,      // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ ASM_DISABLED - "–æ—Ö—Ä–∞–Ω–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞"
    ASRS_REGISTER,     // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –Ω–∞ MQTT)
    ASRS_REGISTER      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–≤–æ–≥–∏: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –Ω–∞ MQTT)
  );
  alarmResponsesSet(
    azDoors,           // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–æ–Ω—É –æ—Ö—Ä–∞–Ω—ã
    ASM_ARMED,         // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ ASM_ARMED - "–ø–æ–ª–Ω–∞—è –æ—Ö—Ä–∞–Ω–∞"
    ASRS_ALARM_SIREN,  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏: –≤–∫–ª—é—á–∏—Ç—å —Å–∏—Ä–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ASRS_REGISTER      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–≤–æ–≥–∏: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –Ω–∞ MQTT)
  );
  alarmResponsesSet(
    azDoors,           // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–æ–Ω—É –æ—Ö—Ä–∞–Ω—ã
    ASM_PERIMETER,     // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ ASM_PERIMETER - "—Ç–æ–ª—å–∫–æ –ø–µ—Ä–∏–º–µ—Ç—Ä (–¥–æ–º–∞)" 
    ASRS_ALARM_SIREN,  // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏: –≤–∫–ª—é—á–∏—Ç—å —Å–∏—Ä–µ–Ω—É –∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    ASRS_REGISTER      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–≤–æ–≥–∏: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –Ω–∞ MQTT)
  );
  alarmResponsesSet(
    azDoors,           // –°—Å—ã–ª–∫–∞ –Ω–∞ –∑–æ–Ω—É –æ—Ö—Ä–∞–Ω—ã
    ASM_OUTBUILDINGS,  // –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ä–µ–∞–∫—Ü–∏–∏ –¥–ª—è —Ä–µ–∂–∏–º–∞ ASM_OUTBUILDINGS - "–≤–Ω–µ—à–Ω–∏–µ –ø–æ–º–µ—â–µ–Ω–∏—è" 
    ASRS_ALARM_NOTIFY, // –†–µ–∞–∫—Ü–∏—è –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Ç—Ä–µ–≤–æ–≥–∏: —Ç–∏—Ö–∞—è —Ç—Ä–µ–≤–æ–≥–∞ - –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è, –Ω–æ —Å–∏—Ä–µ–Ω—É –Ω–µ –≤–∫–ª—é—á–∞—Ç—å
    ASRS_REGISTER      // –†–µ–∞–∫—Ü–∏—è –Ω–∞ –æ—Ç–º–µ–Ω—É —Ç—Ä–µ–≤–æ–≥–∏: —Ç–æ–ª—å–∫–æ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è (—Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏ —ç—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –µ–≥–æ –Ω–∞ MQTT)
  );

  // –î–∞—Ç—á–∏–∫–∏ –¥—ã–º–∞ –∏ –ø–ª–∞–º–µ–Ω–∏ - —Ç—Ä–µ–≤–æ–≥–∞ 24*7
  alarmZoneHandle_t azFire = alarmZoneAdd(
    "–ü–æ–∂–∞—Ä", 
    "fire", 
    nullptr);
  alarmResponsesSet(
    azFire, 
    ASM_DISABLED, 
    ASRS_ALARM_SILENT, 
    ASRS_ALARM_NOTIFY);
  alarmResponsesSet(
    azFire, 
    ASM_ARMED, 
    ASRS_ALARM_SIREN, 
    ASRS_ALARM_NOTIFY);
  alarmResponsesSet(
    azFire, 
    ASM_PERIMETER, 
    ASRS_ALARM_SIREN, 
    ASRS_ALARM_NOTIFY);
  alarmResponsesSet(
    azFire, 
    ASM_OUTBUILDINGS, 
    ASRS_ALARM_SIREN, 
    ASRS_ALARM_NOTIFY);


  // –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ç–µ–≤–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –Ω–∞ X6
  #if defined(CONFIG_GPIO_ALARM_ZONE_3) && (CONFIG_GPIO_ALARM_ZONE_3 > -1)
    alarmZoneHandle_t azPower1 = alarmZoneAdd(
      "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–∏—Ç–∞–Ω–∏—è", 
      "power1", 
      nullptr);
    alarmResponsesSet(
      azPower1, 
      ASM_DISABLED, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower1, 
      ASM_ARMED, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower1, 
      ASM_PERIMETER, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower1, 
      ASM_OUTBUILDINGS, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
  #endif  // CONFIG_GPIO_ALARM_ZONE_3

  // –ö–æ–Ω—Ç—Ä–æ–ª—å —Å–µ—Ç–µ–≤–æ–≥–æ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏—è –Ω–∞ X7
  #if defined(CONFIG_GPIO_ALARM_ZONE_4) && (CONFIG_GPIO_ALARM_ZONE_4 > -1)
    alarmZoneHandle_t azPower2 = alarmZoneAdd(
      "–ö–æ–Ω—Ç—Ä–æ–ª—å –ø–∏—Ç–∞–Ω–∏—è", 
      "power2", 
      nullptr);
    alarmResponsesSet(
      azPower2, 
      ASM_DISABLED, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower2, 
      ASM_ARMED, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower2, 
      ASM_PERIMETER, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
    alarmResponsesSet(
      azPower2, 
      ASM_OUTBUILDINGS, 
      ASRS_REGISTER, 
      ASRS_REGISTER);
  #endif // CONFIG_GPIO_ALARM_ZONE_4

    // –ö–æ–Ω—Ç—Ä–æ–ª—å –ò–ö
    // ...

  rlog_i(logTAG, "Initialization of AFS sensors");

  // ------------------------------------------------------------------------
  // –ü—Ä–æ–≤–æ–¥–Ω—ã–µ –≤—Ö–æ–¥—ã –¥–ª—è –≤—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö GPIO
  // ------------------------------------------------------------------------
  // –ü—Ä–æ–≤–æ–¥–Ω–∞—è –∑–æ–Ω–∞ 1: –≤—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å
  gpioAlarm1.initGPIO();
  alarmSensorHandle_t asWired1 = alarmSensorAdd(
    AST_WIRED,                                      // –¢–∏–ø –¥–∞—Ç—á–∏–∫–∞: –ø—Ä–æ–≤–æ–¥–Ω—ã–µ –¥–∞—Ç—á–∏–∫–∏
    "–í—Ö–æ–¥–Ω–∞—è –¥–≤–µ—Ä—å",                                // –ü–æ–Ω—è—Ç–Ω–æ–µ –∏–º—è –¥–∞—Ç—á–∏–∫–∞
    "door",                                         // –¢–æ–ø–∏–∫ –¥–∞—Ç—á–∏–∫–∞
    CONFIG_ALARM_LOCAL_PUBLISH,                     // –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–æ–∫–∞–ª—å–Ω—ã–µ —Ç–æ–ø–∏–∫–∏ –¥–ª—è –ø–µ—Ä–µ–¥–∞—á–∏ —Å–∏–≥–Ω–∞–ª–æ–≤ –Ω–∞ –¥—Ä—É–≥–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞, –≤ –ø—Ä–∏–º–µ—Ä–µ = TRUE (0x01)
    CONFIG_GPIO_ALARM_ZONE_1                        // –ù–æ–º–µ—Ä –≤—ã–≤–æ–¥–∞ –∏–ª–∏ –∞–¥—Ä–µ—Å –¥–∞—Ç—á–∏–∫–∞
  );
  if (asWired1) {
    alarmEventSet(asWired1, azDoors, 0, ASE_ALARM, 
      1, CONFIG_ALARM_EVENT_MESSAGE_DOOROPEN,       // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ —Å–∏–≥–Ω–∞–ª–µ —Ç—Ä–µ–≤–æ–≥–∏: "üö® –û—Ç–∫—Ä—ã—Ç–∞ –¥–≤–µ—Ä—å"
      0, NULL,                                      // –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ —Ç—Ä–µ–≤–æ–≥–∏: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç
      1,                                            // –ü–æ—Ä–æ–≥ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è (–Ω—É–∂–µ–Ω —Ç–æ–ª—å–∫–æ –¥–ª—è –±–µ—Å–ø—Ä–æ–≤–æ–¥–Ω—ã—Ö –¥–∞—Ç—á–∏–∫–æ–≤, –¥–ª—è –æ—Å—Ç–∞–ª—å–Ω—ã—Ö = 1)
      0,                                            // –í—Ä–µ–º—è –∞–≤—Ç–æ—Å–±—Ä–æ—Å–∞ —Ç—Ä–µ–≤–æ–≥–∏ –ø–æ —Ç–∞–π–º–µ—Ä—É, 0 = –æ—Ç–∫–ª—é—á–µ–Ω–æ
      60,                                           // –ü–µ—Ä–∏–æ–¥ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –Ω–∞ MQTT –±—Ä–æ–∫–µ—Ä–µ
      false);                                       // –¢—Ä–µ–≤–æ–≥–∞ –±–µ–∑ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —Å –¥—Ä—É–≥–∏—Ö –¥–∞—Ç—á–∏–∫–æ–≤
  };









  rlog_i(logTAG, "Initialization of AFS completed");

}

// ------------------------------------------------------------------------
//                             –í–Ω–µ—à–Ω–∏–µ –¥–∞—Ç—á–∏–∫–∏ 
// ------------------------------------------------------------------------

  










void alarmStart()
{
  alarmInitDevices();
  //alarmExternalSensorsInit();
  alarmInitSensors();
}
